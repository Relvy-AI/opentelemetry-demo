components:
  flagd:
    enabled: true
    resources:
      limits:
        memory: 200Mi
    sidecarContainers:
      - name: flagd-ui
        useDefault:
          env: true
        service:
          port: 4000
        env:
          - name: FLAGD_METRICS_EXPORTER
            value: otel
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318
        resources:
          limits:
            memory: 200Mi
        volumeMounts:
          - name: config-rw
            mountPath: /app/data

opentelemetry-collector:
  extraEnvs:
    - name: DD_API_KEY
      valueFrom:
        secretKeyRef:
          name: dd-secrets
          key: DD_API_KEY
    - name: DD_SITE_PARAMETER
      valueFrom:
        secretKeyRef:
          name: dd-secrets
          key: DD_SITE_PARAMETER

  config:
    exporters:
      debug: {}
      opensearch:
        http:
          endpoint: http://opensearch:9200
          tls:
            insecure: true
        logs_index: otel
      otlp:
        endpoint: jaeger-collector:4317
        tls:
          insecure: true
      otlphttp/prometheus:
        endpoint: http://prometheus:9090/api/v1/otlp
        tls:
          insecure: true
      datadog:
        traces:
          span_name_as_resource_name: true
          trace_buffer: 500
        hostname: "otelcol-k8s"
        api:
          site: ${env:DD_SITE_PARAMETER}
          key: ${env:DD_API_KEY}
        metrics:
          sums:
            cumulative_monotonic_mode: to_delta  # Correct value

    extensions:
      health_check:
        endpoint: ${env:MY_POD_IP}:13133

    processors:
      batch:
        timeout: 5s
        send_batch_size: 100
      k8sattributes:
        extract:
          metadata:
          - k8s.namespace.name
          - k8s.deployment.name
          - k8s.statefulset.name
          - k8s.daemonset.name
          - k8s.cronjob.name
          - k8s.job.name
          - k8s.node.name
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.pod.start_time
        passthrough: false
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: connection
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
      resource:
        attributes:
          - key: deployment.environment
            value: "otel"
            action: upsert
          - action: insert
            from_attribute: k8s.pod.uid
            key: service.instance.id
      metricstransform:
        transforms:
          - include: "(.*)"
            match_type: regexp
            action: update
            new_name: "oteldemo.$1"
      transform:
        error_mode: ignore
        trace_statements:
        - context: span
          statements:
          - replace_pattern(name, "\\?.*", "")
          - replace_match(name, "GET /api/products/*", "GET /api/products/{productId}")

    connectors:
      spanmetrics: {}
      datadog/connector:
        traces:
          span_name_as_resource_name: true

    receivers:
      httpcheck/frontend-proxy:
        targets:
        - endpoint: http://frontend-proxy:8080
      jaeger:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:14250
          thrift_compact:
            endpoint: ${env:MY_POD_IP}:6831
          thrift_http:
            endpoint: ${env:MY_POD_IP}:14268
      otlp:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:4317
          http:
            cors:
              allowed_origins:
              - http://*
              - https://*
            endpoint: ${env:MY_POD_IP}:4318
      prometheus:
        config:
          scrape_configs:
          - job_name: opentelemetry-collector
            scrape_interval: 10s
            static_configs:
            - targets:
              - ${env:MY_POD_IP}:8888
      redis:
        collection_interval: 10s
        endpoint: valkey-cart:6379
      zipkin:
        endpoint: ${env:MY_POD_IP}:9411

    service:
      telemetry:
        metrics:
          address: ${env:MY_POD_IP}:8888
          level: detailed
          readers:
          - periodic:
              exporter:
                otlp:
                  endpoint: otel-collector:4318
                  protocol: grpc
              interval: 10000
              timeout: 5000
      extensions:
        - health_check
      pipelines:
        traces:
          receivers: [otlp, jaeger, zipkin]
          processors: [k8sattributes, memory_limiter, resource, transform, batch]
          exporters: [otlp, debug, spanmetrics, datadog, datadog/connector]
        metrics:
          receivers: [httpcheck/frontend-proxy, redis, otlp, spanmetrics, datadog/connector]
          processors: [k8sattributes, memory_limiter, resource, metricstransform, batch]
          exporters: [otlphttp/prometheus, debug, datadog]
        logs:
          receivers: [otlp]
          processors: [k8sattributes, memory_limiter, resource, batch]
          exporters: [opensearch, debug, datadog]
