components:
  flagd:
    enabled: true
    resources:
      limits:
        memory: 200Mi
    sidecarContainers:
      - name: flagd-ui
        useDefault:
          env: true
        service:
          port: 4000
        env:
          - name: FLAGD_METRICS_EXPORTER
            value: otel
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318
        resources:
          limits:
            memory: 200Mi
        volumeMounts:
          - name: config-rw
            mountPath: /app/data

opentelemetry-collector:
  # Add environment variables for Datadog API key and site
  extraEnvs:
    - name: DD_API_KEY
      valueFrom:
        secretKeyRef:
          name: dd-secrets
          key: DD_API_KEY
    - name: DD_SITE_PARAMETER
      valueFrom:
        secretKeyRef:
          name: dd-secrets
          key: DD_SITE_PARAMETER
  
  # Collector configuration
  config:
    exporters:
      debug: {}  # Keep for debugging purposes
      datadog:
        traces:
          span_name_as_resource_name: true  # Maps span names to resource names in Datadog
          trace_buffer: 500                 # Buffer size for traces
        hostname: "otelcol-k8s"             # Hostname for Datadog (customize as needed)
        api:
          site: ${env:DD_SITE_PARAMETER}    # Datadog site from env var
          key: ${env:DD_API_KEY}            # Datadog API key from env var
  
    extensions:
      health_check:
        endpoint: ${env:MY_POD_IP}:13133  # Required for liveness/readiness probes
  
    processors:
      batch: {}  # Batches telemetry data
      memory_limiter:  # Limits memory usage
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
      resource:  # Adds deployment.environment tag
        attributes:
          - key: deployment.environment
            value: "otel"  # Tag for Datadog (customize as needed)
            action: upsert
  
    connectors:
      datadog/connector:  # Computes APM trace metrics
        traces:
          span_name_as_resource_name: true
  
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:4317
          http:
            endpoint: ${env:MY_POD_IP}:4318
      jaeger:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:14250
          thrift_http:
            endpoint: ${env:MY_POD_IP}:14268
          thrift_compact:
            endpoint: ${env:MY_POD_IP}:6831
      zipkin:
        endpoint: ${env:MY_POD_IP}:9411
      prometheus:
        config:
          scrape_configs:
            - job_name: opentelemetry-collector
              scrape_interval: 10s
              static_configs:
                - targets:
                    - ${env:MY_POD_IP}:8888
  
    service:
      telemetry:
        metrics:
          address: ${env:MY_POD_IP}:8888
      extensions:
        - health_check
      pipelines:
        traces:
          receivers: [otlp, jaeger, zipkin]  # Receive traces from multiple sources
          processors: [memory_limiter, resource, batch]  # Process traces
          exporters: [debug, datadog, datadog/connector]  # Export to Datadog and debug
        metrics:
          receivers: [otlp, prometheus, datadog/connector]  # Receive metrics from OTLP and collector itself
          processors: [memory_limiter, resource, batch]  # Process metrics
          exporters: [debug, datadog]  # Export to Datadog and debug
        logs:
          receivers: [otlp]  # Receive logs from OTLP
          processors: [memory_limiter, resource, batch]  # Process logs
          exporters: [debug, datadog]  # Export to Datadog and debug



