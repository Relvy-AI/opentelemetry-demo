components:
  flagd:
    enabled: true
    resources:
      limits:
        memory: 200Mi
    sidecarContainers:
      - name: flagd-ui
        useDefault:
          env: true
        service:
          port: 4000
        env:
          - name: FLAGD_METRICS_EXPORTER
            value: otel
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318
        resources:
          limits:
            memory: 200Mi
        volumeMounts:
          - name: config-rw
            mountPath: /app/data

opentelemetry-collector:
  extraEnvs:
    - name: DD_API_KEY
      valueFrom:
        secretKeyRef:
          name: dd-secrets
          key: DD_API_KEY
    - name: DD_SITE_PARAMETER
      valueFrom:
        secretKeyRef:
          name: dd-secrets
          key: DD_SITE_PARAMETER
  config:
    receivers:
      otlp:
        protocols:
          http:
            cors:
              allowed_origins:
                - "http://*"
                - "https://*"
      httpcheck/frontend-proxy:
        targets:
          - endpoint: http://frontend-proxy:8080
      redis:
        endpoint: "valkey-cart:6379"
        collection_interval: 10s

    exporters:
      otlp:
        endpoint: jaeger-collector:4317
        tls:
          insecure: true
      otlphttp/prometheus:
        endpoint: http://prometheus:9090/api/v1/otlp
        tls:
          insecure: true
      opensearch:
        logs_index: otel
        http:
          endpoint: http://opensearch:9200
          tls:
            insecure: true
      datadog:
        traces:
          span_name_as_resource_name: true
          trace_buffer: 500
        hostname: "otelcol-helm"
        api:
          site: ${DD_SITE_PARAMETER}
          key: ${DD_API_KEY}

    processors:
      transform:
        error_mode: ignore
        trace_statements:
          - context: span
            statements:
              - replace_pattern(name, "\\?.*", "")
              - replace_match(name, "GET /api/products/*", "GET /api/products/{productId}")
      resource:
        attributes:
          - key: service.instance.id
            from_attribute: k8s.pod.uid
            action: insert
          - key: deployment.environment
            value: "otel"
            action: upsert

    connectors:
      spanmetrics: {}

    service:
      pipelines:
        traces:
          processors: [memory_limiter, resource, transform, batch]
          exporters: [otlp, debug, spanmetrics, datadog]
        metrics:
          receivers: [httpcheck/frontend-proxy, redis, otlp, spanmetrics]
          processors: [memory_limiter, resource, batch]
          exporters: [otlphttp/prometheus, debug, datadog]
        logs:
          processors: [memory_limiter, resource, batch]
          exporters: [opensearch, debug, datadog]
